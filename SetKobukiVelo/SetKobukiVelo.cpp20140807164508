// -*- C++ -*-
/*!
 * @file  SetKobukiVelo.cpp
 * @brief Kobuki操作用コンポーネント
 * @date $Date$
 *
 * $Id$
 */

#include "SetKobukiVelo.h"

// Module specification
// <rtc-template block="module_spec">
static const char* setkobukivelo_spec[] =
  {
    "implementation_id", "SetKobukiVelo",
    "type_name",         "SetKobukiVelo",
    "description",       "Kobuki操作用コンポーネント",
    "version",           "1.0.0",
    "vendor",            "A.Nakas",
    "category",          "Category",
    "activity_type",     "PERIODIC",
    "kind",              "DataFlowComponent",
    "max_instance",      "1",
    "language",          "C++",
    "lang_type",         "compile",
    // Configuration variables
    "conf.default.cfg_goal_X", "0",
    "conf.default.cfg_goal_Y", "0",
    "conf.default.cfg_goal_sita", "0",
    "conf.default.cfg_velo_X", "0",
    "conf.default.cfg_velo_Y", "0",
    "conf.default.cfg_velo_a", "0",
    "conf.default.set_max_speed", "0.3",
    "conf.default.bumper_react", "1",
    "conf.default.set_max_evol", "1.07",
    // Widget
    "conf.__widget__.cfg_goal_X", "text",
    "conf.__widget__.cfg_goal_Y", "text",
    "conf.__widget__.cfg_goal_sita", "text",
    "conf.__widget__.cfg_velo_X", "text",
    "conf.__widget__.cfg_velo_Y", "text",
    "conf.__widget__.cfg_velo_a", "text",
    "conf.__widget__.set_max_speed", "text",
    "conf.__widget__.bumper_react", "text",
    "conf.__widget__.set_max_evol", "text",
    // Constraints
    ""
  };
// </rtc-template>

/*!
 * @brief constructor
 * @param manager Maneger Object
 */
SetKobukiVelo::SetKobukiVelo(RTC::Manager* manager)
    // <rtc-template block="initializer">
  : RTC::DataFlowComponentBase(manager),
    m_ref_goal_posIn("ref_goal_pos", m_ref_goal_pos),
    m_ref_now_posIn("ref_now_pos", m_ref_now_pos),
    m_ref_bumperIn("ref_bumper", m_ref_bumper),
    m_dp_nameOut("dp_name", m_dp_name)

    // </rtc-template>
{
}

/*!
 * @brief destructor
 */
SetKobukiVelo::~SetKobukiVelo()
{
}



RTC::ReturnCode_t SetKobukiVelo::onInitialize()
{
  // Registration: InPort/OutPort/Service
  // <rtc-template block="registration">
  // Set InPort buffers
  addInPort("ref_goal_pos", m_ref_goal_posIn);
  addInPort("ref_now_pos", m_ref_now_posIn);
  addInPort("ref_bumper", m_ref_bumperIn);
  
  // Set OutPort buffer
  addOutPort("dp_name", m_dp_nameOut);
  
  // Set service provider to Ports
  
  // Set service consumers to Ports
  
  // Set CORBA Service Ports
  
  // </rtc-template>

  // <rtc-template block="bind_config">
  // Bind variables and configuration variable
  bindParameter("cfg_goal_X", m_cfg_goal_X, "0");
  bindParameter("cfg_goal_Y", m_cfg_goal_Y, "0");
  bindParameter("cfg_goal_sita", m_cfg_goal_sita, "0");
  bindParameter("cfg_velo_X", m_cfg_velo_X, "0");
  bindParameter("cfg_velo_Y", m_cfg_velo_Y, "0");
  bindParameter("cfg_velo_a", m_cfg_velo_a, "0");
  bindParameter("set_max_speed", m_set_max_speed, "0.3");
  bindParameter("bumper_react", m_bumper_react, "1");
  bindParameter("set_max_evol", m_set_max_evol, "1.07");

  std::cout<<"●RTMサマーキャンプ : SetKobukiVeloコンポーネント";
  std::cout<<"\n　本コンポーネントは以下のポートから得られたデータを基に\n　Beegoに対し速度指令値をだす．";
  std::cout<<"\n\n●PortIn";
  std::cout<<"\n　ref_goal_pos : TimedPose2D型．";
  std::cout<<"\n            　   Beegoが行きたい目標地点を入力するポート";
  std::cout<<"\n　ref_LRF : TimedBoolSeq型．";
  std::cout<<"\n        　  Kobukiのバンパ情報";
  std::cout<<"\n          　コンフィグのリアクションが女らバンパー反応";
  std::cout<<"\n　ref_now_pos : TimedPose2D型．Beegoの現在位置を入力するポート";
  std::cout<<"\n\n●PortOut";
  std::cout<<"\n　out_velocity : TimedVelocity2D型．Beegoに対し直進と回転の速度指令を与える．";
  std::cout<<"\n      　         直進速度は最大0.1m/sで回転は最大pi/2";
  std::cout<<"\n\n●Configuration parameter";
  std::cout<<"\n　目標座標と速度指令が可能．";
  std::cout<<std::endl;
  std::cout<<"\nイニシャライズ完了";
  // </rtc-template>
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t SetKobukiVelo::onFinalize()
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SetKobukiVelo::onStartup(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SetKobukiVelo::onShutdown(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/


RTC::ReturnCode_t SetKobukiVelo::onActivated(RTC::UniqueId ec_id)
{
	std::cout<<"\n\nアクティベート開始";

	

	// 目標位置と現在位置を0で初期化
	m_ref_goal_pos.data.position.x = 0;
	m_ref_goal_pos.data.position.y = 0;
	m_ref_goal_pos.data.heading = 0;
	m_ref_now_pos.data.position.x = 0;
	m_ref_now_pos.data.position.y = 0;
	m_ref_now_pos.data.heading = 0;
	m_out_velocity.data.vx = 0;
	m_out_velocity.data.vy = 0;
	m_out_velocity.data.va = 0;

	std::cout<<"\nアクティベート完了";
  return RTC::RTC_OK;
}


RTC::ReturnCode_t SetKobukiVelo::onDeactivated(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t SetKobukiVelo::onExecute(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t SetKobukiVelo::onAborting(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SetKobukiVelo::onError(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SetKobukiVelo::onReset(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SetKobukiVelo::onStateUpdate(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SetKobukiVelo::onRateChanged(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/



extern "C"
{
 
  void SetKobukiVeloInit(RTC::Manager* manager)
  {
    coil::Properties profile(setkobukivelo_spec);
    manager->registerFactory(profile,
                             RTC::Create<SetKobukiVelo>,
                             RTC::Delete<SetKobukiVelo>);
  }
  
};


